<?php


/**
 * Implements hook_entity_type_alter().
 *
 * @param array $entityTypes
 */
function project_entity_type_alter(array &$entityTypes) {

  // Template for the type class.
  $ns = 'Drupal\project\Storage\Project%type%Storage';

  // If his entity has a project storage class then use that.
  foreach ($entityTypes as $type => $data) {
    $c = str_replace("%type%", _camelize($type), $ns);
    if (class_exists($c)) {
      $entityTypes[$type]->setHandlerClass('storage', $c);
    }
  }
}


/**
 * Implements hook_theme
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 *
 * @return array
 */
function project_theme($existing, $type, $theme, $path) {

  $out = [];

  $nt = \Drupal\node\Entity\NodeType::LoadMultiple();
  // Create a detail and index for both nodes and terms.
  foreach ($nt as $bundle => $data) {
    $simple = strtolower(_camelize($bundle));
    $out['node/' . $simple . '/index'] = [
      'variables' => ['results' => NULL],
    ];

    $out['node/' . $simple . '/detail'] = [
      'variables' => [$simple => NULL],
    ];
  }

  $tt = taxonomy_vocabulary_get_names();
  foreach ($tt as $bundle => $data) {
    $simple = strtolower(_camelize($bundle));
    $out['term/' . $simple . '/index'] = [
      'variables' => ['results' => NULL],
    ];

    $out['term/' . $simple . '/detail'] = [
      'variables' => [$simple => NULL],
    ];
  }

  return $out;
}


/**
 * @param $input
 * @param string $separator
 *
 * @return mixed
 */
function _camelize($input, $separator = '_') {
  return str_replace($separator, '', ucwords($input, $separator));
}

/**
 * Truncate a string
 *
 * @param $string
 * @param $limit
 * @param string $pad
 * @return string
 */
function _truncate($string, $limit = 40, $pad = "...")
{
  // Never truncate a url.
  if (filter_var($string, FILTER_VALIDATE_URL)) {
    return $string;
  }

  $string = trim(strip_tags($string));
  // return with no change if string is shorter than $limit
  if (strlen($string) <= $limit) {
    return $string;
  }

  // Return it with the pad.
  return mb_substr($string, 0, ($limit - strlen($pad))) . $pad;
}